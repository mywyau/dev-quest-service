name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Image tag to deploy"
        required: true
        default: "latest"

  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up SBT
        uses: coursier/setup-action@v1
        with:
          jvm: temurin:21

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build Docker image
        run: sbt docker:stage

      - name: Tag and push Docker image
        run: |
          IMAGE_TAG=${{ github.event.inputs.image_tag || github.sha }}
          IMAGE_URI=${{ secrets.ECR_REGISTRY }}/dev-quest-service:$IMAGE_TAG
          docker build -t $IMAGE_URI target/docker/stage/
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Get current task definition
        id: get-task-def
        run: |
          TASK_DEF_ARN=$(aws ecs describe-services \
            --cluster dev-quest-cluster \
            --services dev-quest-service \
            --query "services[0].taskDefinition" \
            --output text)
          echo "task_def_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Download task definition JSON
        id: download-task-def
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ steps.get-task-def.outputs.task_def_arn }} \
            --query "taskDefinition" \
            --output json > task-def.json

      - name: Update image tag in task definition
        id: update-task-def
        run: |
          jq --arg IMAGE_URI "$IMAGE_URI" '.containerDefinitions[0].image = $IMAGE_URI' task-def.json > new-task-def.json

      - name: Register new task definition
        id: register-task-def
        run: |
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)
          echo "new_task_def_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Update ECS service with new task definition
        run: |
          aws ecs update-service \
            --cluster dev-quest-cluster \
            --service dev-quest-service \
            --task-definition ${{ steps.register-task-def.outputs.new_task_def_arn }} \
            --force-new-deployment

      - name: Notify success
        run: echo "âœ… Deployed image $IMAGE_URI to production."
